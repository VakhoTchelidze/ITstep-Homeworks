#იქმნება ხის შემადგენელი ნოუდის სტრუქტურა, რომელსაც აქვს შემდეგი მეთოდები - ველიუ, მარჯვენა ნოუდი, მარცხენა ნოუდი
#მარჯვნივ მიდის ის ნოუდი რომელიც მეტია მშობელ ნოუდზე, ხოლო მარცხნივ ის რომელიც მცირეა
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

#ბინარული ხის სტრუქტურის კლასი
class BinaryTree:

    #ინსტანსის შექმნისას უნდა დავამატოთ პირველი ელემენტი, თუ პირველელემენტს არ დავამატებთ მაშინ დეფოლტად პირველი ელემენტი
    # იქნება ცარიელი სიმრავლე
    def __init__(self):
        self.root = None

    #სიაში ელემენტის ჩასმის ფუნქცია სადაც გადავცემთ მონაცემს
    def insert(self, key):
        #თუ საწყისი ელემენტი არის ცარიელი სიმრავლე მაშინ გადაცემული ელემენტი უნდა ჩავსვათ მის ადგილას
        if self.root is None:
            self.root = Node(key)

        # სხვა შემთხვევაში ვიძახებთ ფუნქციას რომელი ჩასვავს ელემენტს უკიდურესი ელემენტის მარცხნივ ან მარჯვნივ
        else:
            self._insert_recursive(key, self.root)

    #ამ ფუნქციით ხდება გადაცემული ლემენტის ადგილმდებარეობის განსაზღვრა
    def _insert_recursive(self, key, node):

        # თუ გადაცემული ქი ნაკლებია ნოუდის ველიუზე მაშინ ელემენტი უნდა წავიდეს მარჯვნივ სანამ არ მივა ან უკანასკნელ ელემენტთან უკიდეურესად
        #მარჯვნივ ან იქამდე სანამ არ მივა ელემენტამდე რომელიც მასზე მეტია რის შემდეგაც ის შეიცვლის მიმართულება
        if key < node.val:
            # სანამ არ მივა საბოლოო დანიშნულების წერტილამდე იქამდე რეკურსიის დახმარებით ვიძახებთ ერთიდაიგივე მეთოდს
            if node.left is None:
                node.left = Node(key)
            else:
                self._insert_recursive(key, node.left)
        #თუ ლემენტის მნიშვნელობა მეტია გადაცემული ნოუდის მნიშვნელობაზე მაშინ ელემენტი მიდის მარჯვნინვ, აქაც იგივე ლოგიკით ვიყენებთ რეკურსისას
        elif key > node.val:
            if node.right is None:
                node.right = Node(key)
            else:
                self._insert_recursive(key, node.right)

        else:
            #თუ ელემენტი ტოლია ნოუდის მნიშვნელობის მაშინ ის სიაში ვერ ხვდება
            print("Duplicate value. Not inserted.")

    #ბინარული ხის წარმოსადგენად ვიყენებთ ამ მეთოდს რისი საშუალებითაც ვაკითხავთ უკიდურეს მარცხნივ მყოფ ელემენტს და ამ ლოგიკით
    #წარმოვადგენთ. ანუ მეთოდი გაივლის ხეს, მიაკითხავს უკიდურეს მარჯვენა ელემენტს და შემდეგ დაბრუნდება უკან და დაპრინტავს შემხვედრ ელემენტებს
    def inorder_traversal(self):
        # აქ ვინახავთ ელემენტებს
        result = []
        # დამხმარე ფუნქციის საშუალებით ვახდენთ ბინარული ხის სტრუქტურის წარმოდგენას
        self._inorder_traversal_recursive(self.root, result)
        return result

    def _inorder_traversal_recursive(self, node, result):
        #თუ ნოუდი არ არის ცარიელი სიმრავლე, რეკურსიით მივდივათ უკიდურეს მარჯვენა ელემენტთან
        if node:
            # აქ ვიყენებთ რეკურსიას რომ მივიდეთ უკიდურეს მარჯვენა ელემენტამდე
            self._inorder_traversal_recursive(node.left, result)
            #უკიდურესი მარჯვენა ელემენტი ხვდება რეზულტატების სიაშია
            result.append(node.val)
            #როცა უკიდურეს მარჯვენა ელემენტზე მივალთ ვბრუნდებით უკან და წარმოვადგენთ მარცხენა ელემენტებს
            self._inorder_traversal_recursive(node.right, result)



tree = BinaryTree()
tree.insert(5)
tree.insert(3)
tree.insert(7)
tree.insert(2)
tree.insert(4)
tree.insert(6)
tree.insert(8)

# ფუნქციამ უნდა დააბრუნო შემდეგი თანმიმდევრობა [2, 3, 4, 5, 6, 7, 8]
print(tree.inorder_traversal())
